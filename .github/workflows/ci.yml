name: CI

on:
  push:
    branches:
      - master
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
    tags: [ 'v*' ]
  pull_request:
    branches:
      - master
      - '[0-9].[0-9]+'
      - 'update/pre-commit-autoupdate'
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build


jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cache PyPI
      uses: actions/cache@v2.1.6
      with:
        key: pip-lint-${{ hashFiles('**/requirements.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v2.1.0
      with:
        path: tests/requirements.txt
    - name: Run linter
      run: |
        make lint
    - name: Prepare twine checker
      run: |
        pip install -U twine wheel
        python setup.py sdist bdist_wheel
    - name: Run twine checker
      run: |
        twine check dist/*

  test-unix:
    name: Test Unix
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest]
        pyver: ["3.6", "3.7", "3.8", "3.9", "3.10", pypy3]
        uvloop: [uvloop, no-uvloop]
        redis: [5.0.10, 6.2.4]
        exclude:
        - { pyver: pypy3, uvloop: uvloop, os: ubuntu-latest, redis: 5.0.10 }
        - { pyver: pypy3, uvloop: uvloop, os: ubuntu-latest, redis: 6.2.4 }
        - { pyver: 3.6, uvloop: uvloop, os: ubuntu-latest, redis: 5.0.10 }
        - { pyver: 3.6, uvloop: uvloop, os: ubuntu-latest, redis: 6.2.4 }
      fail-fast: false
    services:
      redis:
        image: redis:${{ matrix.redis }}
        ports:
        # Maps port 6379 on service container to the host
        - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    env:
      OS: ${{ matrix.os }}
      INSTALL_DIR: ${{ github.workspace }}/redis
      PYTEST_ADDOPTS: --${{ matrix.uvloop }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyver }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Cache PyPI
      uses: actions/cache@v2.1.6
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.pyver }}-${{ hashFiles('**/requirements.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.pyver }}
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v2.1.0
      with:
        path: tests/requirements.txt
    - name: Install uvloop
      if: ${{ matrix.uvloop == 'uvloop' }}
      run: pip install uvloop
    - name: Install Self
      run: |
        pip install -e . -c tests/requirements.txt
    - name: Run unittests (${{ matrix.uvloop }}, ${{ matrix.os }})
      run: |
        make ci-test
        python -m coverage xml
    - name: Upload coverage
      uses: codecov/codecov-action@v2.1.0
      with:
        file: ./coverage.xml
        flags: unit
        env_vars: OS
        fail_ci_if_error: false

  deploy:
   name: Deploy
   runs-on: ubuntu-latest
   needs: test-unix
   # Run only on pushing a tag
   if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
   steps:
   - name: Checkout
     uses: actions/checkout@v2.3.4
   - name: Setup Python 3.8
     uses: actions/setup-python@v2
     with:
       python-version: "3.8"
   - name: Install dependencies
     run:
       python -m pip install -U pip wheel twine
   - name: Make dists
     run:
       python setup.py sdist bdist_wheel
   - name: PyPI upload
     env:
       TWINE_USERNAME: __token__
       TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
     run: |
       twine upload dist/*
